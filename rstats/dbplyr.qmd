---
title: "dbplyr"
description: "si simple, si compliqu√©.."
author: Simon Coulombe
date: 2024-08-16
categories: [r, dbplyr]
lang: fr
---

help



```{r setup, echo = FALSE}
library(dbplyr)
library(dplyr)
library(DBI)
```

```{r}

con <- DBI::dbConnect(RSQLite::SQLite(), dbname = ":memory:")

copy_to(con, nycflights13::flights, "flights",
  temporary = FALSE, 
  indexes = list(
    c("year", "month", "day"), 
    "carrier", 
    "tailnum",
    "dest"
  )
)

copy_to(con, iris, "iris",
  temporary = FALSE, 
  indexes = NULL
)
```

lazy connect to the tables
```{r}
flights_db <- tbl(con, "flights")
iris_db <- tbl(con, "iris")
```

if the table is in a schema, use dbplyr::in_schema:  
# working with schema  

To write to a table in a schema, I can use DBI::Id() and dbplyr::in_schema(), like so:  
```{r, eval = FALSE}
DBI::dbWriteTable(con, DBI::Id(schema = "my_schema",   table = "iris"),  value = iris, overwrite = TRUE)
iris_db <-  tbl(con,dbplyr::in_schema("my_schema","iris")) 
```
note that dbWriteTable is pretty slow, consider using the `bcp` tool when working with real database.

# generate a cool sql query using dbplyr and across

```{r}
my_query <- iris_db %>% 
  summarise(
    across(.cols = starts_with(("Sepal")),
           .fns = list(mean = mean, min = min)
           )
    )

my_query %>% show_query()
```

download the result from my query
```{r}
my_query %>% collect()
```
remotely execute the query using dplyr::compute()  and save under a new name in the db.  Normally I would set "temporary = FALSE", but it doesnt work with rsqlite.

This is useful when I want to use dbplyr to generate SQL code (like using across above), but I want the processing to be done by the SQL server.  No bandwidth or CPU would be used in this case.  
```{r}
#compute(my_query, "my_query_output", temporary = FALSE)
compute(my_query, "my_query_output")
my_query_output_db <- tbl(con, "my_query_output")
my_query_output_db
```

# some notes on SQL translation     

  * nrow() doesnt work, use tally().  
  * unique() doesnt work, use distinct()  
  * ifelse() doesnt work, use case_when()  
  * left_join does work well with join_by()  :   
    `left_join(table_b, join_by(key_a ==  key_b)) `
  