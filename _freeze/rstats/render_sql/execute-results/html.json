{
  "hash": "014939f064f868fcaa92456d2521095e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"extract actual sql code from dbplyr::show_query(), \"\nauthor: Simon Coulombe\ndescription: |\n  How to combine normal SQL code to code generated using dplyr and run everything using dbExecute  \ndate: 2024-08-16\nformat:\n  html:\n    code-fold: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(DBI)\nlibrary(\"RSQLite\")\ncon <- DBI::dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncopy_to(con, iris, \"iris\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\niris_db <- tbl(con, \"iris\")\n```\n:::\n\n\ncreate a query using dplyr because it is easy\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_for_temp_table <- iris_db %>% \n  head(5) \n\nquery_for_temp_table_text <- query_for_temp_table %>%\n  dbplyr:::sql_render() %>%\n  as.character()\n\nquery_for_temp_table_text\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"SELECT `iris`.*\\nFROM `iris`\\nLIMIT 5\"\n```\n\n\n:::\n:::\n\n\n\nlet's read a \"case when\" query from a .sql file:  Here I put a [] around the name of Sepal.Width to deal with the dot in the field name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsepal_size_sql <-  tempfile()\nwriteLines(c( 'CASE',\n              'WHEN [Sepal.Width] > 5 then \"big\"',\n              'else \"small\"',\n              'END AS sepal_size'\n), sepal_size_sql)\n\n\nsql_queries <- list()\nsql_queries[[\"sepal_size\"]] <- readr::read_lines(sepal_size_sql) %>%\n  glue::glue_collapse(sep = \"\\n\")\n\nsql_queries[[\"sepal_size\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCASE\nWHEN [Sepal.Width] > 5 then \"big\"\nelse \"small\"\nEND AS sepal_size\n```\n\n\n:::\n:::\n\n\n\ncreate a query that applies the content of sepal_size.sql to  the output of my temp query I generated using dplyr.\nnote that the temp table subquery must be named using 'as sub':\nnote that the \"sql_queries\" list  could have more than 1 item.  We could read from multiple .sql files here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_for_final_table <- glue::glue('create table final as select *,  \n{paste(sql_queries, collapse = \",\")}\n                       from ({query_for_temp_table_text}) as sub\n                       ')\n\nquery_for_final_table \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncreate table final as select *,  \nCASE\nWHEN [Sepal.Width] > 5 then \"big\"\nelse \"small\"\nEND AS sepal_size\n                       from (SELECT `iris`.*\nFROM `iris`\nLIMIT 5) as sub\n```\n\n\n:::\n:::\n\n\n\nrun the final query using dbExecute\n\n::: {.cell}\n\n```{.r .cell-code}\ndbExecute(con, query_for_final_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nIt worked!\nWe applied the code for a \"case when\" we read in an .sql file to a subquery that was defined using dplyr!\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"select * from final\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species sepal_size\n1          5.1         3.5          1.4         0.2  setosa      small\n2          4.9         3.0          1.4         0.2  setosa      small\n3          4.7         3.2          1.3         0.2  setosa      small\n4          4.6         3.1          1.5         0.2  setosa      small\n5          5.0         3.6          1.4         0.2  setosa      small\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}